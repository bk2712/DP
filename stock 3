int sol(vector<int> &prices,int ind,int n,int buy,int tar,vector<vector<vector<int>>> &dp){
    if(tar==0) return 0;
    if(ind>=n) return 0;
    if(dp[ind][buy][tar]!=-1) return dp[ind][buy][tar];
    int profit=0;
    if(buy){
        profit= max(-prices[ind]+sol(prices,ind+1,n,0,tar,dp), sol(prices,ind+1,n,1,tar,dp));
    }else{
        profit= max(prices[ind]+sol(prices,ind+1,n,1,tar-1,dp), sol(prices,ind+1,n,0,tar,dp));
    }
    return dp[ind][buy][tar]= profit;
}
    int maxProfit(vector<int>& prices) {
        int n= prices.size();
        vector<vector<vector<int>>> dp(n,vector<vector<int>> (2,vector<int> (3,-1)));
        return sol(prices,0,n,1,2,dp);
    }
